/*=============================================================================
This file was generated by the VimbaClassGenerator
=============================================================================*/

namespace Mako_Camera
{
    public class Allied_Vision_Mako_U_130BCamera : AVT.VmbAPINET.Camera
    {
        #region Constructors.

        public Allied_Vision_Mako_U_130BCamera (
            string cameraID,
            string cameraName,
            string cameraModel,
            string cameraSerialNumber,
            string interfaceID,
            AVT.VmbAPINET.VmbInterfaceType interfaceType,
            string interfaceName,
            string interfaceSerialNumber,
            AVT.VmbAPINET.VmbAccessModeType interfacePermittedAccess)
            : base (
                cameraID,
                cameraName,
                cameraModel,
                cameraSerialNumber,
                interfaceID,
                interfaceType,
                interfaceName,
                interfaceSerialNumber,
                interfacePermittedAccess)
        {
        }

        #endregion

        #region Public properties.

        #region Category /AcquisitionControl

        public long AcquisitionFrameCount
        {
            get { return AcquisitionFrameCountFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature AcquisitionFrameCountFeature
        {
            get
            {
                if (m_AcquisitionFrameCountFeature == null)
                    m_AcquisitionFrameCountFeature = Features ["AcquisitionFrameCount"];
                return m_AcquisitionFrameCountFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionFrameCountFeature = null;

        public double AcquisitionFrameRate
        {
            get { return AcquisitionFrameRateFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature AcquisitionFrameRateFeature
        {
            get
            {
                if (m_AcquisitionFrameRateFeature == null)
                    m_AcquisitionFrameRateFeature = Features ["AcquisitionFrameRate"];
                return m_AcquisitionFrameRateFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionFrameRateFeature = null;

        public AcquisitionFrameRateModeEnum AcquisitionFrameRateMode
        {
            get { return (AcquisitionFrameRateModeEnum) AcquisitionFrameRateModeFeature.EnumIntValue; }
            set { AcquisitionFrameRateModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature AcquisitionFrameRateModeFeature
        {
            get
            {
                if (m_AcquisitionFrameRateModeFeature == null)
                    m_AcquisitionFrameRateModeFeature = Features ["AcquisitionFrameRateMode"];
                return m_AcquisitionFrameRateModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionFrameRateModeFeature = null;

        public AcquisitionModeEnum AcquisitionMode
        {
            get { return (AcquisitionModeEnum) AcquisitionModeFeature.EnumIntValue; }
            set { AcquisitionModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature AcquisitionModeFeature
        {
            get
            {
                if (m_AcquisitionModeFeature == null)
                    m_AcquisitionModeFeature = Features ["AcquisitionMode"];
                return m_AcquisitionModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionModeFeature = null;

        public bool AcquisitionStatus
        {
            get { return AcquisitionStatusFeature.BoolValue; }
        }
        public AVT.VmbAPINET.Feature AcquisitionStatusFeature
        {
            get
            {
                if (m_AcquisitionStatusFeature == null)
                    m_AcquisitionStatusFeature = Features ["AcquisitionStatus"];
                return m_AcquisitionStatusFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionStatusFeature = null;

        public AcquisitionStatusSelectorEnum AcquisitionStatusSelector
        {
            get { return (AcquisitionStatusSelectorEnum) AcquisitionStatusSelectorFeature.EnumIntValue; }
            set { AcquisitionStatusSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature AcquisitionStatusSelectorFeature
        {
            get
            {
                if (m_AcquisitionStatusSelectorFeature == null)
                    m_AcquisitionStatusSelectorFeature = Features ["AcquisitionStatusSelector"];
                return m_AcquisitionStatusSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionStatusSelectorFeature = null;

        public ExposureModeEnum ExposureMode
        {
            get { return (ExposureModeEnum) ExposureModeFeature.EnumIntValue; }
            set { ExposureModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature ExposureModeFeature
        {
            get
            {
                if (m_ExposureModeFeature == null)
                    m_ExposureModeFeature = Features ["ExposureMode"];
                return m_ExposureModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureModeFeature = null;

        public double ExposureTime
        {
            get { return ExposureTimeFeature.FloatValue; }
            set { ExposureTimeFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureTimeFeature
        {
            get
            {
                if (m_ExposureTimeFeature == null)
                    m_ExposureTimeFeature = Features ["ExposureTime"];
                return m_ExposureTimeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureTimeFeature = null;

        public TriggerActivationEnum TriggerActivation
        {
            get { return (TriggerActivationEnum) TriggerActivationFeature.EnumIntValue; }
            set { TriggerActivationFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerActivationFeature
        {
            get
            {
                if (m_TriggerActivationFeature == null)
                    m_TriggerActivationFeature = Features ["TriggerActivation"];
                return m_TriggerActivationFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerActivationFeature = null;

        public double TriggerDelay
        {
            get { return TriggerDelayFeature.FloatValue; }
            set { TriggerDelayFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature TriggerDelayFeature
        {
            get
            {
                if (m_TriggerDelayFeature == null)
                    m_TriggerDelayFeature = Features ["TriggerDelay"];
                return m_TriggerDelayFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerDelayFeature = null;

        public TriggerModeEnum TriggerMode
        {
            get { return (TriggerModeEnum) TriggerModeFeature.EnumIntValue; }
            set { TriggerModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerModeFeature
        {
            get
            {
                if (m_TriggerModeFeature == null)
                    m_TriggerModeFeature = Features ["TriggerMode"];
                return m_TriggerModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerModeFeature = null;

        public TriggerSelectorEnum TriggerSelector
        {
            get { return (TriggerSelectorEnum) TriggerSelectorFeature.EnumIntValue; }
            set { TriggerSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerSelectorFeature
        {
            get
            {
                if (m_TriggerSelectorFeature == null)
                    m_TriggerSelectorFeature = Features ["TriggerSelector"];
                return m_TriggerSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerSelectorFeature = null;

        public TriggerSourceEnum TriggerSource
        {
            get { return (TriggerSourceEnum) TriggerSourceFeature.EnumIntValue; }
            set { TriggerSourceFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerSourceFeature
        {
            get
            {
                if (m_TriggerSourceFeature == null)
                    m_TriggerSourceFeature = Features ["TriggerSource"];
                return m_TriggerSourceFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerSourceFeature = null;

        #endregion

        #region Category /AnalogControl

        public double BlackLevel
        {
            get { return BlackLevelFeature.FloatValue; }
            set { BlackLevelFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature BlackLevelFeature
        {
            get
            {
                if (m_BlackLevelFeature == null)
                    m_BlackLevelFeature = Features ["BlackLevel"];
                return m_BlackLevelFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BlackLevelFeature = null;

        public BlackLevelSelectorEnum BlackLevelSelector
        {
            get { return (BlackLevelSelectorEnum) BlackLevelSelectorFeature.EnumIntValue; }
            set { BlackLevelSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature BlackLevelSelectorFeature
        {
            get
            {
                if (m_BlackLevelSelectorFeature == null)
                    m_BlackLevelSelectorFeature = Features ["BlackLevelSelector"];
                return m_BlackLevelSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BlackLevelSelectorFeature = null;

        public double Gain
        {
            get { return GainFeature.FloatValue; }
            set { GainFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature GainFeature
        {
            get
            {
                if (m_GainFeature == null)
                    m_GainFeature = Features ["Gain"];
                return m_GainFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainFeature = null;

        public GainSelectorEnum GainSelector
        {
            get { return (GainSelectorEnum) GainSelectorFeature.EnumIntValue; }
            set { GainSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature GainSelectorFeature
        {
            get
            {
                if (m_GainSelectorFeature == null)
                    m_GainSelectorFeature = Features ["GainSelector"];
                return m_GainSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainSelectorFeature = null;

        public double Gamma
        {
            get { return GammaFeature.FloatValue; }
            set { GammaFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature GammaFeature
        {
            get
            {
                if (m_GammaFeature == null)
                    m_GammaFeature = Features ["Gamma"];
                return m_GammaFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GammaFeature = null;

        #endregion

        #region Category /BufferHandlingControl

        public long MaxDriverBuffersCount
        {
            get { return MaxDriverBuffersCountFeature.IntValue; }
            set { MaxDriverBuffersCountFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature MaxDriverBuffersCountFeature
        {
            get
            {
                if (m_MaxDriverBuffersCountFeature == null)
                    m_MaxDriverBuffersCountFeature = Features ["MaxDriverBuffersCount"];
                return m_MaxDriverBuffersCountFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_MaxDriverBuffersCountFeature = null;

        public long StreamAnnounceBufferMinimum
        {
            get { return StreamAnnounceBufferMinimumFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StreamAnnounceBufferMinimumFeature
        {
            get
            {
                if (m_StreamAnnounceBufferMinimumFeature == null)
                    m_StreamAnnounceBufferMinimumFeature = Features ["StreamAnnounceBufferMinimum"];
                return m_StreamAnnounceBufferMinimumFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamAnnounceBufferMinimumFeature = null;

        public long StreamAnnouncedBufferCount
        {
            get { return StreamAnnouncedBufferCountFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StreamAnnouncedBufferCountFeature
        {
            get
            {
                if (m_StreamAnnouncedBufferCountFeature == null)
                    m_StreamAnnouncedBufferCountFeature = Features ["StreamAnnouncedBufferCount"];
                return m_StreamAnnouncedBufferCountFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamAnnouncedBufferCountFeature = null;

        public StreamBufferHandlingModeEnum StreamBufferHandlingMode
        {
            get { return (StreamBufferHandlingModeEnum) StreamBufferHandlingModeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature StreamBufferHandlingModeFeature
        {
            get
            {
                if (m_StreamBufferHandlingModeFeature == null)
                    m_StreamBufferHandlingModeFeature = Features ["StreamBufferHandlingMode"];
                return m_StreamBufferHandlingModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamBufferHandlingModeFeature = null;

        #endregion

        #region Category /CorrectionControl

        public CorrectionModeEnum CorrectionMode
        {
            get { return (CorrectionModeEnum) CorrectionModeFeature.EnumIntValue; }
            set { CorrectionModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature CorrectionModeFeature
        {
            get
            {
                if (m_CorrectionModeFeature == null)
                    m_CorrectionModeFeature = Features ["CorrectionMode"];
                return m_CorrectionModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_CorrectionModeFeature = null;

        public CorrectionSelectorEnum CorrectionSelector
        {
            get { return (CorrectionSelectorEnum) CorrectionSelectorFeature.EnumIntValue; }
            set { CorrectionSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature CorrectionSelectorFeature
        {
            get
            {
                if (m_CorrectionSelectorFeature == null)
                    m_CorrectionSelectorFeature = Features ["CorrectionSelector"];
                return m_CorrectionSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_CorrectionSelectorFeature = null;

        public CorrectionSetDefaultEnum CorrectionSetDefault
        {
            get { return (CorrectionSetDefaultEnum) CorrectionSetDefaultFeature.EnumIntValue; }
            set { CorrectionSetDefaultFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature CorrectionSetDefaultFeature
        {
            get
            {
                if (m_CorrectionSetDefaultFeature == null)
                    m_CorrectionSetDefaultFeature = Features ["CorrectionSetDefault"];
                return m_CorrectionSetDefaultFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_CorrectionSetDefaultFeature = null;

        public CorrectionSetSelectorEnum CorrectionSetSelector
        {
            get { return (CorrectionSetSelectorEnum) CorrectionSetSelectorFeature.EnumIntValue; }
            set { CorrectionSetSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature CorrectionSetSelectorFeature
        {
            get
            {
                if (m_CorrectionSetSelectorFeature == null)
                    m_CorrectionSetSelectorFeature = Features ["CorrectionSetSelector"];
                return m_CorrectionSetSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_CorrectionSetSelectorFeature = null;

        #endregion

        #region Category /CorrectionControl/CorrectionInfo

        public long CorrectionDataSize
        {
            get { return CorrectionDataSizeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature CorrectionDataSizeFeature
        {
            get
            {
                if (m_CorrectionDataSizeFeature == null)
                    m_CorrectionDataSizeFeature = Features ["CorrectionDataSize"];
                return m_CorrectionDataSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_CorrectionDataSizeFeature = null;

        public long CorrectionEntryType
        {
            get { return CorrectionEntryTypeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature CorrectionEntryTypeFeature
        {
            get
            {
                if (m_CorrectionEntryTypeFeature == null)
                    m_CorrectionEntryTypeFeature = Features ["CorrectionEntryType"];
                return m_CorrectionEntryTypeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_CorrectionEntryTypeFeature = null;

        #endregion

        #region Category /DeviceControl

        public string DeviceFamilyName
        {
            get { return DeviceFamilyNameFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceFamilyNameFeature
        {
            get
            {
                if (m_DeviceFamilyNameFeature == null)
                    m_DeviceFamilyNameFeature = Features ["DeviceFamilyName"];
                return m_DeviceFamilyNameFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceFamilyNameFeature = null;

        public string DeviceFirmwareID
        {
            get { return DeviceFirmwareIDFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceFirmwareIDFeature
        {
            get
            {
                if (m_DeviceFirmwareIDFeature == null)
                    m_DeviceFirmwareIDFeature = Features ["DeviceFirmwareID"];
                return m_DeviceFirmwareIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceFirmwareIDFeature = null;

        public DeviceFirmwareIDSelectorEnum DeviceFirmwareIDSelector
        {
            get { return (DeviceFirmwareIDSelectorEnum) DeviceFirmwareIDSelectorFeature.EnumIntValue; }
            set { DeviceFirmwareIDSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature DeviceFirmwareIDSelectorFeature
        {
            get
            {
                if (m_DeviceFirmwareIDSelectorFeature == null)
                    m_DeviceFirmwareIDSelectorFeature = Features ["DeviceFirmwareIDSelector"];
                return m_DeviceFirmwareIDSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceFirmwareIDSelectorFeature = null;

        public string DeviceFirmwareVersion
        {
            get { return DeviceFirmwareVersionFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceFirmwareVersionFeature
        {
            get
            {
                if (m_DeviceFirmwareVersionFeature == null)
                    m_DeviceFirmwareVersionFeature = Features ["DeviceFirmwareVersion"];
                return m_DeviceFirmwareVersionFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceFirmwareVersionFeature = null;

        public DeviceFirmwareVersionSelectorEnum DeviceFirmwareVersionSelector
        {
            get { return (DeviceFirmwareVersionSelectorEnum) DeviceFirmwareVersionSelectorFeature.EnumIntValue; }
            set { DeviceFirmwareVersionSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature DeviceFirmwareVersionSelectorFeature
        {
            get
            {
                if (m_DeviceFirmwareVersionSelectorFeature == null)
                    m_DeviceFirmwareVersionSelectorFeature = Features ["DeviceFirmwareVersionSelector"];
                return m_DeviceFirmwareVersionSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceFirmwareVersionSelectorFeature = null;

        public long DeviceGenCPVersionMajor
        {
            get { return DeviceGenCPVersionMajorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceGenCPVersionMajorFeature
        {
            get
            {
                if (m_DeviceGenCPVersionMajorFeature == null)
                    m_DeviceGenCPVersionMajorFeature = Features ["DeviceGenCPVersionMajor"];
                return m_DeviceGenCPVersionMajorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceGenCPVersionMajorFeature = null;

        public long DeviceGenCPVersionMinor
        {
            get { return DeviceGenCPVersionMinorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceGenCPVersionMinorFeature
        {
            get
            {
                if (m_DeviceGenCPVersionMinorFeature == null)
                    m_DeviceGenCPVersionMinorFeature = Features ["DeviceGenCPVersionMinor"];
                return m_DeviceGenCPVersionMinorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceGenCPVersionMinorFeature = null;

        public DeviceIndicatorModeEnum DeviceIndicatorMode
        {
            get { return (DeviceIndicatorModeEnum) DeviceIndicatorModeFeature.EnumIntValue; }
            set { DeviceIndicatorModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature DeviceIndicatorModeFeature
        {
            get
            {
                if (m_DeviceIndicatorModeFeature == null)
                    m_DeviceIndicatorModeFeature = Features ["DeviceIndicatorMode"];
                return m_DeviceIndicatorModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceIndicatorModeFeature = null;

        public long DeviceLinkThroughputLimit
        {
            get { return DeviceLinkThroughputLimitFeature.IntValue; }
            set { DeviceLinkThroughputLimitFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature DeviceLinkThroughputLimitFeature
        {
            get
            {
                if (m_DeviceLinkThroughputLimitFeature == null)
                    m_DeviceLinkThroughputLimitFeature = Features ["DeviceLinkThroughputLimit"];
                return m_DeviceLinkThroughputLimitFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceLinkThroughputLimitFeature = null;

        public DeviceLinkThroughputLimitModeEnum DeviceLinkThroughputLimitMode
        {
            get { return (DeviceLinkThroughputLimitModeEnum) DeviceLinkThroughputLimitModeFeature.EnumIntValue; }
            set { DeviceLinkThroughputLimitModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature DeviceLinkThroughputLimitModeFeature
        {
            get
            {
                if (m_DeviceLinkThroughputLimitModeFeature == null)
                    m_DeviceLinkThroughputLimitModeFeature = Features ["DeviceLinkThroughputLimitMode"];
                return m_DeviceLinkThroughputLimitModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceLinkThroughputLimitModeFeature = null;

        public string DeviceManufacturerInfo
        {
            get { return DeviceManufacturerInfoFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceManufacturerInfoFeature
        {
            get
            {
                if (m_DeviceManufacturerInfoFeature == null)
                    m_DeviceManufacturerInfoFeature = Features ["DeviceManufacturerInfo"];
                return m_DeviceManufacturerInfoFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceManufacturerInfoFeature = null;

        public string DeviceModelName
        {
            get { return DeviceModelNameFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceModelNameFeature
        {
            get
            {
                if (m_DeviceModelNameFeature == null)
                    m_DeviceModelNameFeature = Features ["DeviceModelName"];
                return m_DeviceModelNameFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceModelNameFeature = null;

        public long DeviceSFNCVersionMajor
        {
            get { return DeviceSFNCVersionMajorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceSFNCVersionMajorFeature
        {
            get
            {
                if (m_DeviceSFNCVersionMajorFeature == null)
                    m_DeviceSFNCVersionMajorFeature = Features ["DeviceSFNCVersionMajor"];
                return m_DeviceSFNCVersionMajorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceSFNCVersionMajorFeature = null;

        public long DeviceSFNCVersionMinor
        {
            get { return DeviceSFNCVersionMinorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceSFNCVersionMinorFeature
        {
            get
            {
                if (m_DeviceSFNCVersionMinorFeature == null)
                    m_DeviceSFNCVersionMinorFeature = Features ["DeviceSFNCVersionMinor"];
                return m_DeviceSFNCVersionMinorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceSFNCVersionMinorFeature = null;

        public long DeviceSFNCVersionSubMinor
        {
            get { return DeviceSFNCVersionSubMinorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceSFNCVersionSubMinorFeature
        {
            get
            {
                if (m_DeviceSFNCVersionSubMinorFeature == null)
                    m_DeviceSFNCVersionSubMinorFeature = Features ["DeviceSFNCVersionSubMinor"];
                return m_DeviceSFNCVersionSubMinorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceSFNCVersionSubMinorFeature = null;

        public DeviceScanTypeEnum DeviceScanType
        {
            get { return (DeviceScanTypeEnum) DeviceScanTypeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceScanTypeFeature
        {
            get
            {
                if (m_DeviceScanTypeFeature == null)
                    m_DeviceScanTypeFeature = Features ["DeviceScanType"];
                return m_DeviceScanTypeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceScanTypeFeature = null;

        public string DeviceSerialNumber
        {
            get { return DeviceSerialNumberFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceSerialNumberFeature
        {
            get
            {
                if (m_DeviceSerialNumberFeature == null)
                    m_DeviceSerialNumberFeature = Features ["DeviceSerialNumber"];
                return m_DeviceSerialNumberFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceSerialNumberFeature = null;

        public double DeviceTemperature
        {
            get { return DeviceTemperatureFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature DeviceTemperatureFeature
        {
            get
            {
                if (m_DeviceTemperatureFeature == null)
                    m_DeviceTemperatureFeature = Features ["DeviceTemperature"];
                return m_DeviceTemperatureFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceTemperatureFeature = null;

        public DeviceTemperatureSelectorEnum DeviceTemperatureSelector
        {
            get { return (DeviceTemperatureSelectorEnum) DeviceTemperatureSelectorFeature.EnumIntValue; }
            set { DeviceTemperatureSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature DeviceTemperatureSelectorFeature
        {
            get
            {
                if (m_DeviceTemperatureSelectorFeature == null)
                    m_DeviceTemperatureSelectorFeature = Features ["DeviceTemperatureSelector"];
                return m_DeviceTemperatureSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceTemperatureSelectorFeature = null;

        public string DeviceUserID
        {
            get { return DeviceUserIDFeature.StringValue; }
            set { DeviceUserIDFeature.StringValue = value; }
        }
        public AVT.VmbAPINET.Feature DeviceUserIDFeature
        {
            get
            {
                if (m_DeviceUserIDFeature == null)
                    m_DeviceUserIDFeature = Features ["DeviceUserID"];
                return m_DeviceUserIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceUserIDFeature = null;

        public string DeviceVendorName
        {
            get { return DeviceVendorNameFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceVendorNameFeature
        {
            get
            {
                if (m_DeviceVendorNameFeature == null)
                    m_DeviceVendorNameFeature = Features ["DeviceVendorName"];
                return m_DeviceVendorNameFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceVendorNameFeature = null;

        public string DeviceVersion
        {
            get { return DeviceVersionFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceVersionFeature
        {
            get
            {
                if (m_DeviceVersionFeature == null)
                    m_DeviceVersionFeature = Features ["DeviceVersion"];
                return m_DeviceVersionFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceVersionFeature = null;

        public long Timestamp
        {
            get { return TimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature TimestampFeature
        {
            get
            {
                if (m_TimestampFeature == null)
                    m_TimestampFeature = Features ["Timestamp"];
                return m_TimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TimestampFeature = null;

        #endregion

        #region Category /DigitalIOControl

        public InputDebounceModeEnum InputDebounceMode
        {
            get { return (InputDebounceModeEnum) InputDebounceModeFeature.EnumIntValue; }
            set { InputDebounceModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature InputDebounceModeFeature
        {
            get
            {
                if (m_InputDebounceModeFeature == null)
                    m_InputDebounceModeFeature = Features ["InputDebounceMode"];
                return m_InputDebounceModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_InputDebounceModeFeature = null;

        public double InputDebounceTime
        {
            get { return InputDebounceTimeFeature.FloatValue; }
            set { InputDebounceTimeFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature InputDebounceTimeFeature
        {
            get
            {
                if (m_InputDebounceTimeFeature == null)
                    m_InputDebounceTimeFeature = Features ["InputDebounceTime"];
                return m_InputDebounceTimeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_InputDebounceTimeFeature = null;

        public bool LineInverter
        {
            get { return LineInverterFeature.BoolValue; }
            set { LineInverterFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature LineInverterFeature
        {
            get
            {
                if (m_LineInverterFeature == null)
                    m_LineInverterFeature = Features ["LineInverter"];
                return m_LineInverterFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LineInverterFeature = null;

        public LineModeEnum LineMode
        {
            get { return (LineModeEnum) LineModeFeature.EnumIntValue; }
            set { LineModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature LineModeFeature
        {
            get
            {
                if (m_LineModeFeature == null)
                    m_LineModeFeature = Features ["LineMode"];
                return m_LineModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LineModeFeature = null;

        public LineSelectorEnum LineSelector
        {
            get { return (LineSelectorEnum) LineSelectorFeature.EnumIntValue; }
            set { LineSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature LineSelectorFeature
        {
            get
            {
                if (m_LineSelectorFeature == null)
                    m_LineSelectorFeature = Features ["LineSelector"];
                return m_LineSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LineSelectorFeature = null;

        public LineSourceEnum LineSource
        {
            get { return (LineSourceEnum) LineSourceFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature LineSourceFeature
        {
            get
            {
                if (m_LineSourceFeature == null)
                    m_LineSourceFeature = Features ["LineSource"];
                return m_LineSourceFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LineSourceFeature = null;

        public bool LineStatus
        {
            get { return LineStatusFeature.BoolValue; }
        }
        public AVT.VmbAPINET.Feature LineStatusFeature
        {
            get
            {
                if (m_LineStatusFeature == null)
                    m_LineStatusFeature = Features ["LineStatus"];
                return m_LineStatusFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LineStatusFeature = null;

        public OutputDurationModeEnum OutputDurationMode
        {
            get { return (OutputDurationModeEnum) OutputDurationModeFeature.EnumIntValue; }
            set { OutputDurationModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature OutputDurationModeFeature
        {
            get
            {
                if (m_OutputDurationModeFeature == null)
                    m_OutputDurationModeFeature = Features ["OutputDurationMode"];
                return m_OutputDurationModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_OutputDurationModeFeature = null;

        public double OutputDurationTime
        {
            get { return OutputDurationTimeFeature.FloatValue; }
            set { OutputDurationTimeFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature OutputDurationTimeFeature
        {
            get
            {
                if (m_OutputDurationTimeFeature == null)
                    m_OutputDurationTimeFeature = Features ["OutputDurationTime"];
                return m_OutputDurationTimeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_OutputDurationTimeFeature = null;

        public UserOutputSelectorEnum UserOutputSelector
        {
            get { return (UserOutputSelectorEnum) UserOutputSelectorFeature.EnumIntValue; }
            set { UserOutputSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature UserOutputSelectorFeature
        {
            get
            {
                if (m_UserOutputSelectorFeature == null)
                    m_UserOutputSelectorFeature = Features ["UserOutputSelector"];
                return m_UserOutputSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserOutputSelectorFeature = null;

        public bool UserOutputValue
        {
            get { return UserOutputValueFeature.BoolValue; }
            set { UserOutputValueFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature UserOutputValueFeature
        {
            get
            {
                if (m_UserOutputValueFeature == null)
                    m_UserOutputValueFeature = Features ["UserOutputValue"];
                return m_UserOutputValueFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserOutputValueFeature = null;

        #endregion

        #region Category /FileAccessControl

        public byte [] FileAccessBuffer
        {
            get { return FileAccessBufferFeature.RawValue; }
        }
        public AVT.VmbAPINET.Feature FileAccessBufferFeature
        {
            get
            {
                if (m_FileAccessBufferFeature == null)
                    m_FileAccessBufferFeature = Features ["FileAccessBuffer"];
                return m_FileAccessBufferFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileAccessBufferFeature = null;

        public long FileAccessLength
        {
            get { return FileAccessLengthFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FileAccessLengthFeature
        {
            get
            {
                if (m_FileAccessLengthFeature == null)
                    m_FileAccessLengthFeature = Features ["FileAccessLength"];
                return m_FileAccessLengthFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileAccessLengthFeature = null;

        public long FileAccessOffset
        {
            get { return FileAccessOffsetFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FileAccessOffsetFeature
        {
            get
            {
                if (m_FileAccessOffsetFeature == null)
                    m_FileAccessOffsetFeature = Features ["FileAccessOffset"];
                return m_FileAccessOffsetFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileAccessOffsetFeature = null;

        public FileOpenModeEnum FileOpenMode
        {
            get { return (FileOpenModeEnum) FileOpenModeFeature.EnumIntValue; }
            set { FileOpenModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature FileOpenModeFeature
        {
            get
            {
                if (m_FileOpenModeFeature == null)
                    m_FileOpenModeFeature = Features ["FileOpenMode"];
                return m_FileOpenModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileOpenModeFeature = null;

        public long FileOperationResult
        {
            get { return FileOperationResultFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FileOperationResultFeature
        {
            get
            {
                if (m_FileOperationResultFeature == null)
                    m_FileOperationResultFeature = Features ["FileOperationResult"];
                return m_FileOperationResultFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileOperationResultFeature = null;

        public FileOperationSelectorEnum FileOperationSelector
        {
            get { return (FileOperationSelectorEnum) FileOperationSelectorFeature.EnumIntValue; }
            set { FileOperationSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature FileOperationSelectorFeature
        {
            get
            {
                if (m_FileOperationSelectorFeature == null)
                    m_FileOperationSelectorFeature = Features ["FileOperationSelector"];
                return m_FileOperationSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileOperationSelectorFeature = null;

        public FileOperationStatusEnum FileOperationStatus
        {
            get { return (FileOperationStatusEnum) FileOperationStatusFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature FileOperationStatusFeature
        {
            get
            {
                if (m_FileOperationStatusFeature == null)
                    m_FileOperationStatusFeature = Features ["FileOperationStatus"];
                return m_FileOperationStatusFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileOperationStatusFeature = null;

        public FileProcessStatusEnum FileProcessStatus
        {
            get { return (FileProcessStatusEnum) FileProcessStatusFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature FileProcessStatusFeature
        {
            get
            {
                if (m_FileProcessStatusFeature == null)
                    m_FileProcessStatusFeature = Features ["FileProcessStatus"];
                return m_FileProcessStatusFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileProcessStatusFeature = null;

        public FileSelectorEnum FileSelector
        {
            get { return (FileSelectorEnum) FileSelectorFeature.EnumIntValue; }
            set { FileSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature FileSelectorFeature
        {
            get
            {
                if (m_FileSelectorFeature == null)
                    m_FileSelectorFeature = Features ["FileSelector"];
                return m_FileSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileSelectorFeature = null;

        public long FileSize
        {
            get { return FileSizeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FileSizeFeature
        {
            get
            {
                if (m_FileSizeFeature == null)
                    m_FileSizeFeature = Features ["FileSize"];
                return m_FileSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileSizeFeature = null;

        public FileStatusEnum FileStatus
        {
            get { return (FileStatusEnum) FileStatusFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature FileStatusFeature
        {
            get
            {
                if (m_FileStatusFeature == null)
                    m_FileStatusFeature = Features ["FileStatus"];
                return m_FileStatusFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileStatusFeature = null;

        #endregion

        #region Category /ImageFormatControl

        public long Height
        {
            get { return HeightFeature.IntValue; }
            set { HeightFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature HeightFeature
        {
            get
            {
                if (m_HeightFeature == null)
                    m_HeightFeature = Features ["Height"];
                return m_HeightFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_HeightFeature = null;

        public long HeightMax
        {
            get { return HeightMaxFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature HeightMaxFeature
        {
            get
            {
                if (m_HeightMaxFeature == null)
                    m_HeightMaxFeature = Features ["HeightMax"];
                return m_HeightMaxFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_HeightMaxFeature = null;

        public long OffsetX
        {
            get { return OffsetXFeature.IntValue; }
            set { OffsetXFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature OffsetXFeature
        {
            get
            {
                if (m_OffsetXFeature == null)
                    m_OffsetXFeature = Features ["OffsetX"];
                return m_OffsetXFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_OffsetXFeature = null;

        public long OffsetY
        {
            get { return OffsetYFeature.IntValue; }
            set { OffsetYFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature OffsetYFeature
        {
            get
            {
                if (m_OffsetYFeature == null)
                    m_OffsetYFeature = Features ["OffsetY"];
                return m_OffsetYFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_OffsetYFeature = null;

        public PixelFormatEnum PixelFormat
        {
            get { return (PixelFormatEnum) PixelFormatFeature.EnumIntValue; }
            set { PixelFormatFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature PixelFormatFeature
        {
            get
            {
                if (m_PixelFormatFeature == null)
                    m_PixelFormatFeature = Features ["PixelFormat"];
                return m_PixelFormatFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_PixelFormatFeature = null;

        public PixelSizeEnum PixelSize
        {
            get { return (PixelSizeEnum) PixelSizeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature PixelSizeFeature
        {
            get
            {
                if (m_PixelSizeFeature == null)
                    m_PixelSizeFeature = Features ["PixelSize"];
                return m_PixelSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_PixelSizeFeature = null;

        public bool ReverseX
        {
            get { return ReverseXFeature.BoolValue; }
            set { ReverseXFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature ReverseXFeature
        {
            get
            {
                if (m_ReverseXFeature == null)
                    m_ReverseXFeature = Features ["ReverseX"];
                return m_ReverseXFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ReverseXFeature = null;

        public long SensorHeight
        {
            get { return SensorHeightFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature SensorHeightFeature
        {
            get
            {
                if (m_SensorHeightFeature == null)
                    m_SensorHeightFeature = Features ["SensorHeight"];
                return m_SensorHeightFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SensorHeightFeature = null;

        public long SensorWidth
        {
            get { return SensorWidthFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature SensorWidthFeature
        {
            get
            {
                if (m_SensorWidthFeature == null)
                    m_SensorWidthFeature = Features ["SensorWidth"];
                return m_SensorWidthFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SensorWidthFeature = null;

        public long Width
        {
            get { return WidthFeature.IntValue; }
            set { WidthFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature WidthFeature
        {
            get
            {
                if (m_WidthFeature == null)
                    m_WidthFeature = Features ["Width"];
                return m_WidthFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_WidthFeature = null;

        public long WidthMax
        {
            get { return WidthMaxFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature WidthMaxFeature
        {
            get
            {
                if (m_WidthMaxFeature == null)
                    m_WidthMaxFeature = Features ["WidthMax"];
                return m_WidthMaxFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_WidthMaxFeature = null;

        #endregion

        #region Category /StreamInformation

        public string StreamID
        {
            get { return StreamIDFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature StreamIDFeature
        {
            get
            {
                if (m_StreamIDFeature == null)
                    m_StreamIDFeature = Features ["StreamID"];
                return m_StreamIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamIDFeature = null;

        public bool StreamIsGrabbing
        {
            get { return StreamIsGrabbingFeature.BoolValue; }
        }
        public AVT.VmbAPINET.Feature StreamIsGrabbingFeature
        {
            get
            {
                if (m_StreamIsGrabbingFeature == null)
                    m_StreamIsGrabbingFeature = Features ["StreamIsGrabbing"];
                return m_StreamIsGrabbingFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamIsGrabbingFeature = null;

        public StreamTypeEnum StreamType
        {
            get { return (StreamTypeEnum) StreamTypeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature StreamTypeFeature
        {
            get
            {
                if (m_StreamTypeFeature == null)
                    m_StreamTypeFeature = Features ["StreamType"];
                return m_StreamTypeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamTypeFeature = null;

        #endregion

        #region Category /TestControl

        public long TestPendingAck
        {
            get { return TestPendingAckFeature.IntValue; }
            set { TestPendingAckFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature TestPendingAckFeature
        {
            get
            {
                if (m_TestPendingAckFeature == null)
                    m_TestPendingAckFeature = Features ["TestPendingAck"];
                return m_TestPendingAckFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TestPendingAckFeature = null;

        #endregion

        #region Category /TransportLayerControl

        public long PayloadSize
        {
            get { return PayloadSizeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature PayloadSizeFeature
        {
            get
            {
                if (m_PayloadSizeFeature == null)
                    m_PayloadSizeFeature = Features ["PayloadSize"];
                return m_PayloadSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_PayloadSizeFeature = null;

        #endregion

        #region Category /UserSetControl

        public UserSetDefaultEnum UserSetDefault
        {
            get { return (UserSetDefaultEnum) UserSetDefaultFeature.EnumIntValue; }
            set { UserSetDefaultFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature UserSetDefaultFeature
        {
            get
            {
                if (m_UserSetDefaultFeature == null)
                    m_UserSetDefaultFeature = Features ["UserSetDefault"];
                return m_UserSetDefaultFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetDefaultFeature = null;

        public UserSetSelectorEnum UserSetSelector
        {
            get { return (UserSetSelectorEnum) UserSetSelectorFeature.EnumIntValue; }
            set { UserSetSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature UserSetSelectorFeature
        {
            get
            {
                if (m_UserSetSelectorFeature == null)
                    m_UserSetSelectorFeature = Features ["UserSetSelector"];
                return m_UserSetSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetSelectorFeature = null;

        #endregion

        #endregion

        #region Public methods.

        #region Category /AcquisitionControl

        public void AcquisitionAbort ()
        {
            AcquisitionAbortFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature AcquisitionAbortFeature
        {
            get
            {
                if (m_AcquisitionAbortFeature == null)
                    m_AcquisitionAbortFeature = Features ["AcquisitionAbort"];
                return m_AcquisitionAbortFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionAbortFeature = null;

        public void AcquisitionStart ()
        {
            AcquisitionStartFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature AcquisitionStartFeature
        {
            get
            {
                if (m_AcquisitionStartFeature == null)
                    m_AcquisitionStartFeature = Features ["AcquisitionStart"];
                return m_AcquisitionStartFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionStartFeature = null;

        public void AcquisitionStop ()
        {
            AcquisitionStopFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature AcquisitionStopFeature
        {
            get
            {
                if (m_AcquisitionStopFeature == null)
                    m_AcquisitionStopFeature = Features ["AcquisitionStop"];
                return m_AcquisitionStopFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionStopFeature = null;

        public void TriggerSoftware ()
        {
            TriggerSoftwareFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature TriggerSoftwareFeature
        {
            get
            {
                if (m_TriggerSoftwareFeature == null)
                    m_TriggerSoftwareFeature = Features ["TriggerSoftware"];
                return m_TriggerSoftwareFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerSoftwareFeature = null;

        #endregion

        #region Category /DeviceControl

        public void DeviceReset ()
        {
            DeviceResetFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature DeviceResetFeature
        {
            get
            {
                if (m_DeviceResetFeature == null)
                    m_DeviceResetFeature = Features ["DeviceReset"];
                return m_DeviceResetFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceResetFeature = null;

        #endregion

        #region Category /FileAccessControl

        public void FileOperationExecute ()
        {
            FileOperationExecuteFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature FileOperationExecuteFeature
        {
            get
            {
                if (m_FileOperationExecuteFeature == null)
                    m_FileOperationExecuteFeature = Features ["FileOperationExecute"];
                return m_FileOperationExecuteFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FileOperationExecuteFeature = null;

        #endregion

        #region Category /UserSetControl

        public void UserSetLoad ()
        {
            UserSetLoadFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature UserSetLoadFeature
        {
            get
            {
                if (m_UserSetLoadFeature == null)
                    m_UserSetLoadFeature = Features ["UserSetLoad"];
                return m_UserSetLoadFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetLoadFeature = null;

        public void UserSetSave ()
        {
            UserSetSaveFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature UserSetSaveFeature
        {
            get
            {
                if (m_UserSetSaveFeature == null)
                    m_UserSetSaveFeature = Features ["UserSetSave"];
                return m_UserSetSaveFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetSaveFeature = null;

        #endregion

        #endregion

        #region Enum declarations.

        public enum AcquisitionFrameRateModeEnum
        {
            Off = 0,
            Basic = 1
        }

        public enum AcquisitionModeEnum
        {
            SingleFrame = 0,
            MultiFrame = 1,
            Continuous = 2
        }

        public enum AcquisitionStatusSelectorEnum
        {
            AcquisitionTriggerWait = 0,
            AcquisitionActive = 1,
            AcquisitionTransfer = 2,
            FrameTriggerWait = 3,
            FrameActive = 4,
            ExposureActive = 5
        }

        public enum BlackLevelSelectorEnum
        {
            All = 0
        }

        public enum CorrectionModeEnum
        {
            Off = 0,
            On = 1
        }

        public enum CorrectionSelectorEnum
        {
            DefectPixelCorrection = 0,
            FixedPatternNoiseCorrection = 1
        }

        public enum CorrectionSetDefaultEnum
        {
            Factory = 0,
            User = 1
        }

        public enum CorrectionSetSelectorEnum
        {
            Factory = 0,
            User = 1
        }

        public enum DeviceFirmwareIDSelectorEnum
        {
            Current = 0,
            Supported = 1
        }

        public enum DeviceFirmwareVersionSelectorEnum
        {
            Current = 0,
            Programmed = 1
        }

        public enum DeviceIndicatorModeEnum
        {
            Inactive = 0,
            Active = 1,
            ErrorStatus = 2
        }

        public enum DeviceLinkThroughputLimitModeEnum
        {
            Off = 0,
            On = 1
        }

        public enum DeviceScanTypeEnum
        {
            Areascan = 0
        }

        public enum DeviceTemperatureSelectorEnum
        {
            Mainboard = 1
        }

        public enum ExposureModeEnum
        {
            Timed = 1,
            TriggerWidth = 2
        }

        public enum FileOpenModeEnum
        {
            Read = 1,
            Write = 2
        }

        public enum FileOperationSelectorEnum
        {
            Open = 0,
            Close = 1,
            Read = 2,
            Write = 3,
            Delete = 4
        }

        public enum FileOperationStatusEnum
        {
            Success = 0,
            Failure = 1,
            Invalid = 3,
            Denied = 4,
            Error = 5,
            Fault1 = 6,
            Fault2 = 7
        }

        public enum FileProcessStatusEnum
        {
            None = 0,
            UpdateNotRequired = 1
        }

        public enum FileSelectorEnum
        {
            Firmware = 1,
            UserData = 17,
            DefectPixelCorrection = 32,
            FixedPatternNoiseCorrection = 36
        }

        public enum FileStatusEnum
        {
            Closed = 0,
            Open = 1
        }

        public enum GainSelectorEnum
        {
            All = 0
        }

        public enum InputDebounceModeEnum
        {
            Off = 0,
            On = 1
        }

        public enum LineModeEnum
        {
            Input = 0,
            Output = 1
        }

        public enum LineSelectorEnum
        {
            Line0 = 0,
            Line1 = 1,
            Line2 = 2,
            Line3 = 3
        }

        public enum LineSourceEnum
        {
            Off = 0,
            AcquisitionActive = 1,
            FrameTriggerWait = 2,
            FrameActive = 3,
            ExposureActive = 4,
            Stream0TransferActive = 5,
            ReadoutActive = 21,
            AcquisitionTriggerWait = 22,
            BurstTriggerWait = 23,
            UserOutput0 = 64,
            UserOutput1 = 65,
            UserOutput2 = 66,
            UserOutput3 = 67
        }

        public enum OutputDurationModeEnum
        {
            Off = 0,
            On = 1
        }

        public enum PixelFormatEnum
        {
            Mono8 = 17301505,
            Mono10p = 17432646
        }

        public enum PixelSizeEnum
        {
            Bpp1 = 1,
            Bpp2 = 2,
            Bpp4 = 4,
            Bpp8 = 8,
            Bpp10 = 10,
            Bpp12 = 12,
            Bpp14 = 14,
            Bpp16 = 16,
            Bpp20 = 20,
            Bpp24 = 24
        }

        public enum StreamBufferHandlingModeEnum
        {
            Default = 0
        }

        public enum StreamTypeEnum
        {
            USB3 = 8
        }

        public enum TriggerActivationEnum
        {
            RisingEdge = 0,
            FallingEdge = 1,
            AnyEdge = 2,
            LevelHigh = 3,
            LevelLow = 4
        }

        public enum TriggerModeEnum
        {
            Off = 0,
            On = 1
        }

        public enum TriggerSelectorEnum
        {
            FrameStart = 0,
            AcquisitionStart = 1
        }

        public enum TriggerSourceEnum
        {
            Software = 0,
            Line0 = 16,
            Line1 = 17,
            Line2 = 18,
            Line3 = 19
        }

        public enum UserOutputSelectorEnum
        {
            UserOutput0 = 0,
            UserOutput1 = 1,
            UserOutput2 = 2,
            UserOutput3 = 3
        }

        public enum UserSetDefaultEnum
        {
            Default = 1,
            UserSet1 = 2,
            UserSet2 = 3,
            UserSet3 = 4,
            UserSet4 = 5
        }

        public enum UserSetSelectorEnum
        {
            Default = 1,
            UserSet1 = 2,
            UserSet2 = 3,
            UserSet3 = 4,
            UserSet4 = 5
        }

        #endregion
    }
}
